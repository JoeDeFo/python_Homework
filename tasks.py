### Задание 1
### Импортируйте библиотеку Numpy и дайте ей псевдоним np. Создайте массив Numpy под названием a размером 5x2, то есть состоящий из 5 строк и 2 столбцов. Первый столбец должен содержать числа 1, 2, 3, 3, 1, а второй - числа 6, 8, 11, 10, 7. Будем считать, что каждый столбец - это признак, а строка - наблюдение. Затем найдите среднее значение по каждому признаку, используя метод mean массива Numpy. Результат запишите в массив mean_a, в нем должно быть 2 элемента.
import numpy as np
a = np.array([[1, 6],
              [2, 8],
              [3, 11],
              [3, 10],
              [1, 7]])
a
array([[ 1,  6],
       [ 2,  8],
       [ 3, 11],
       [ 3, 10],
       [ 1,  7]])
mean_a = a.mean(axis = 0)
mean_a
array([2. , 8.4])

### Задание 2
### Вычислите массив a_centered, отняв от значений массива “а” средние значения соответствующих признаков, содержащиеся в массиве mean_a. Вычисление должно производиться в одно действие. Получившийся массив должен иметь размер 5x2.
a_centered = np.subtract(a, mean_a)
a_centered
array([[-1. , -2.4],
       [ 0. , -0.4],
       [ 1. ,  2.6],
       [ 1. ,  1.6],
       [-1. , -1.4]])

### Задание 3
### Найдите скалярное произведение столбцов массива a_centered. В результате должна получиться величина a_centered_sp. Затем поделите a_centered_sp на N-1, где N - число наблюдений.
a1 = a_centered[:,0]
a2 = a_centered[:,1]
a_centered_sp = np.dot(a1,a2)
a_centered_sp
8.0
N=a.shape[0]
N
5
division = a_centered_sp / (N-1)
division
2.0

### Задание 4**
### В этом задании проверьте получившееся число, вычислив ковариацию еще одним способом - с помощью функции np.cov. В качестве аргумента m функция np.cov должна принимать транспонированный массив “a”. В получившейся ковариационной матрице (массив Numpy размером 2x2) искомое значение ковариации будет равно элементу в строке с индексом 0 и столбце с индексом 1.
cov = np.cov(a.transpose())
cov
array([[1. , 2. ],
       [2. , 4.3]])

### Тема “Работа с данными в Pandas”
### Задание 1
### Импортируйте библиотеку Pandas и дайте ей псевдоним pd. Создайте датафрейм authors со столбцами author_id и author_name, в которых соответственно содержатся данные: [1, 2, 3] и ['Тургенев', 'Чехов', 'Островский'].
### Затем создайте датафрейм book cо столбцами author_id, book_title и price, в которых соответственно содержатся данные:
### [1, 1, 1, 2, 2, 3, 3], ['Отцы и дети', 'Рудин', 'Дворянское гнездо', 'Толстый и тонкий', 'Дама с собачкой', 'Гроза', 'Таланты и поклонники'], [450, 300, 350, 500, 450, 370, 290].

import pandas as pd
authors = pd.DataFrame({'author_id':[1, 2, 3],
                   'author_name':['Тургенев', 'Чехов', 'Островский']}, columns=['author_id', 'author_name'])
authors

books = pd.DataFrame({'author_id':[1, 1, 1, 2, 2, 3, 3],
                     'book_title':['Отцы и дети', 'Рудин', 'Дворянское гнездо', 'Толстый и тонкий', 'Дама с собачкой', 'Гроза', 'Таланты и поклонники'],
                     'price':[450, 300, 350, 500, 450, 370, 290]},
                      columns = ['author_id', 'book_title', 'price'])
books

### Задание 2
### Получите датафрейм authors_price, соединив датафреймы authors и books по полю author_id.
authors_price = pd.merge(authors, books, on = 'author_id', how = 'outer')
authors_price

### Задание 3
### Создайте датафрейм top5, в котором содержатся строки из authors_price с пятью самыми дорогими книгами.
top5=authors_price.nlargest(5, 'price')
top5

### Задание 4
### Создайте датафрейм authors_stat на основе информации из authors_price. В датафрейме authors_stat должны быть четыре столбца:
### author_name, min_price, max_price и mean_price,
### в которых должны содержаться соответственно имя автора, минимальная, максимальная и средняя цена на книги этого автора.
b1 = authors_price.groupby('author_name').agg({'price': 'min'}).rename(columns={'price':'min_price'})
b2 = authors_price.groupby('author_name').agg({'price': 'max'}).rename(columns={'price':'max_price'})
b3 = authors_price.groupby('author_name').agg({'price': 'mean'}).rename(columns={'price':'mean_price'})
authors_stat = pd.concat([b1, b2, b3], axis = 1)
authors_stat
